hub:
  config:
    RucioAuthenticator:
      client_id: ""
      client_secret: ""
      authorize_url: "https://iam-escape.cloud.cnaf.infn.it/authorize"
      token_url: https://iam-escape.cloud.cnaf.infn.it/token
      userdata_url: https://iam-escape.cloud.cnaf.infn.it/userinfo
      username_key: preferred_username
      scope:
        - openid
        - profile
        - email
  extraConfig:
    00-first-config: |
      import pprint
      import os
      import warnings
      import requests

      from oauthenticator.generic import GenericOAuthenticator

      class RucioAuthenticator(GenericOAuthenticator):
          def __init__(self, **kwargs):
              super().__init__(**kwargs)
              self.enable_auth_state = True

          def exchange_token(self, token):
              params = {
                  'client_id': self.client_id,
                  'client_secret': self.client_secret,
                  'grant_type': 'urn:ietf:params:oauth:grant-type:token-exchange',
                  'subject_token': token,
                  'scope': 'openid email profile',
                  'audience': 'rucio'
              }
              response = requests.post(self.token_url, data=params)
              refresh_token = response.json()['access_token']
              return refresh_token
          
          async def pre_spawn_start(self, user, spawner):
              auth_state = await user.get_auth_state()
              pprint.pprint(auth_state)
              if not auth_state:
                  # user has no auth state
                  return
              
              # define some environment variables from auth_state
              spawner.environment['ACCESS_TOKEN'] = auth_state['access_token']
              spawner.environment['REFRESH_TOKEN'] = self.exchange_token(auth_state['access_token'])

      c.JupyterHub.authenticator_class = RucioAuthenticator

      # enable authentication state
      c.GenericOAuthenticator.enable_auth_state = True

      if 'JUPYTERHUB_CRYPT_KEY' not in os.environ:
          warnings.warn(
              "Need JUPYTERHUB_CRYPT_KEY env for persistent auth_state.\n"
              "    export JUPYTERHUB_CRYPT_KEY=$(openssl rand -hex 32)"
          )
          c.CryptKeeper.keys = [os.urandom(32)]

singleuser:
  storage:
    extraVolumes:
      - name: eulake-escape-data
        hostPath:
          path: /var/eos-eulake-home/eulake/escape/data
      - name: eulake-escape-tmp
        hostPath:
          path: /var/eos-eulake-home/eulake/escape/tmp_data
    extraVolumeMounts:
      - name: eulake-escape-data
        mountPath: /eos/escape/
        mountPropagation: HostToContainer
        readOnly: true
      - name: eulake-escape-tmp
        mountPath: /scratch/
        mountPropagation: HostToContainer

  image:
    name: ghcr.io/goseind/singleuser-base
    tag: latest
    pullPolicy: Always
  cmd: null
  extraFiles:
    ca:
      mountPath: /opt/cert.pem
      stringData: |
        -----BEGIN CERTIFICATE-----
        <certificate>
        -----END CERTIFICATE-----

  extraEnv:
    RUCIO_MODE: "replica"
    RUCIO_WILDCARD_ENABLED: "1"
    RUCIO_BASE_URL: "https://vre-rucio.cern.ch"
    RUCIO_AUTH_URL: "https://vre-rucio.cern.ch"
    RUCIO_DISPLAY_NAME: "VRE-RUCIO"
    RUCIO_NAME: "vre-rucio.cern.ch"
    RUCIO_SITE_NAME: "ROAMING"
    RUCIO_CA_CERT: "/opt/cert.pem"
    RUCIO_OIDC_AUTH: "env"
    RUCIO_OIDC_ENV_NAME: "REFRESH_TOKEN"
    RUCIO_DEFAULT_AUTH_TYPE: "oidc"
    RUCIO_OAUTH_ID: "rucio"
    RUCIO_DEFAULT_INSTANCE: "vre-rucio.cern.ch"
    RUCIO_DESTINATION_RSE: "CERN-EOS"
    RUCIO_RSE_MOUNT_PATH: "/eos/escape"
    RUCIO_PATH_BEGINS_AT: "5"
